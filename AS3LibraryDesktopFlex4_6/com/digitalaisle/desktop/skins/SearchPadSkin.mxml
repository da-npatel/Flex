<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

@see spark.components.SkinnableContainer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5" 
		xmlns:keypads="com.digitalaisle.uilibrary.keypads.*" 
		xmlns:hc="com.hillelcoren.components.*" 
		xmlns:design="com.digitalaisle.uilibrary.design.*" 
		xmlns:buttons="com.digitalaisle.uilibrary.components.buttons.*" 
		xmlns:components="com.digitalaisle.frontend.components.*" 
		xmlns:core="com.digitalaisle.frontend.core.*" 
		xmlns:components1="com.digitalaisle.uilibrary.components.*">
	<fx:Metadata>[HostComponent("com.digitalaisle.desktop.popups.SearchPad")]</fx:Metadata>
	
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import com.digitalaisle.frontend.enums.PanelType;
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				// Push backgroundColor and backgroundAlpha directly.
				// Handle undefined backgroundColor by hiding the background object.
				if (isNaN(getStyle("backgroundColor")))
				{
					background.visible = false;
				}
				else
				{
					background.visible = true;
					bgFill.color = getStyle("backgroundColor");
					bgFill.alpha = getStyle("backgroundAlpha");
				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			
		]]>        
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State name="results" />
		<s:State name="noresults" />
	</s:states>
	
	<!--- Defines the appearance of the SkinnableContainer class's background. -->
	<s:Rect id="background" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<!--- @private -->
			<s:SolidColor id="bgFill" color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<!--
	Note: setting the minimum size to 0 here so that changes to the host component's
	size will not be thwarted by this skin part's minimum size.   This is a compromise,
	more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
	-->
	<!--- @copy spark.components.SkinnableContainer#contentGroup -->
	<s:Group id="contentGroup" left="0" right="0" top="0" bottom="0" width="{hostComponent.width}" height="{hostComponent.height}" minWidth="0" minHeight="0">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<!-- Background Fill -->
		<s:VGroup width="100%" height="100%" gap="0">
			
			<s:Rect width="100%" height="24%">
				<s:fill>
					<s:SolidColor color="0xB6B8BA" />
				</s:fill>
			</s:Rect>
			
			<s:Line xFrom="0" yFrom="0" xTo="{this.width}" yTo="0">
				<s:stroke>
					<s:SolidColorStroke color="0x464547" weight="2"/>
				</s:stroke>
			</s:Line>
			
			<s:Rect width="100%" height="75%">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:entries>
							<s:GradientEntry color="0x9B9AA5"  alpha="1"/>
							<s:GradientEntry color="0x44454C"  alpha="1"/>
						</s:entries>
					</s:LinearGradient>			
				</s:fill>
			</s:Rect>
		</s:VGroup>
		<!--<s:BitmapImage id="backgroundImage" width="100%" height="100%" />-->
		<s:Group width="100%" height="100%" verticalCenter="0" horizontalCenter="0">
			
			<s:VGroup width="100%" height="98%" gap="0" horizontalAlign="center">
				<s:Group width="100%" height="15%" >					
					<design:BevelRectDropShadow width="100%" height="80%" fillColor="{hostComponent.getStyle('primaryColor')}"/>
					<s:HGroup width="98%" height="80%" gap="4" paddingTop="4" horizontalCenter="0" verticalCenter="0" >						
						<components1:ClearableTextInput id="inputField" width="80%" height="80%" fontSize="24"/>						
						<buttons:DAButton id="searchButton" width="20%" height="80%" fontSize="20" color="0xffffff" label="Search" skinClass="com.digitalaisle.frontend.core.keypad.skins.LetterKeySkin" chromeColor="0xA1A1A1"/>
					</s:HGroup>					
				</s:Group>
				
				<!-- <s:Group width="100%" height="30%" includeIn="normal" /> -->
				
				<s:Group width="100%" height="10%" includeIn="normal, results, noresults" verticalCenter="0">
					<s:RichText id="searchTipText" width="100%" textAlign="center"
								text.normal="Enter your search terms and touch Search"
								text="Touch the search input field to search again." fontSize="20" paddingTop="10"/>
				</s:Group>
				
				<s:VGroup includeIn="noresults" width="100%" height="70%" verticalAlign="middle" horizontalAlign="center" >
					<s:RichText id="emptyResultsRichText" width="90%" text="No results found, please search again." fontSize="30" textAlign="center" />
				</s:VGroup>
				
				<keypads:Keyboard id="keypad" width="98%" height="50%" type="emailPad" includeIn="normal"/>
				<components:DAPanelSlider id="resultsPanelSlider" width="100%" height="75%" visiblePanels="5" panelSpacing="0"
										  panelWidth="{hostComponent.width}" panelHeight="{hostComponent.height * .15}" panelType="{PanelType.LIST}" scrollPosition="vertical"
										  panelSkinClass="com.digitalaisle.uilibrary.skins.ResultsPanelSkin" includeIn="results" />
			</s:VGroup>
			
			<design:PopupStroke width="{hostComponent.width}" height="{hostComponent.height}" />
			<s:HGroup width="100%" top="-15" right="-15" horizontalAlign="right">
				<buttons:DASimpleButton id="closeButton" />
			</s:HGroup>
		</s:Group>
	</s:Group>
</s:Skin>
